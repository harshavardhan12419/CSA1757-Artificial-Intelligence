def print_board(board):
    for row in board:
        print(" ".join("Q" if x else "." for x in row))
    print("\n")

def is_safe(board, row, col):
    # Check this column on upper side
    for i in range(row):
        if board[i][col] == 1:
            return False

    # Check upper diagonal on left side
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if j < 0:
            break
        if board[i][j] == 1:
            return False

    # Check upper diagonal on right side
    for i, j in zip(range(row, -1, -1), range(col, len(board))):
        if j >= len(board):
            break
        if board[i][j] == 1:
            return False

    return True

def solve_n_queens(board, row=0):
    if row >= len(board):
        print_board(board)
        return True  # Found a solution

    for col in range(len(board)):
        if is_safe(board, row, col):
            board[row][col] = 1  # Place queen

            if solve_n_queens(board, row + 1):
                # Uncomment the next line if you want to find all solutions
                # return True
                pass

            board[row][col] = 0  # Backtrack

    return False

if __name__ == "__main__":
    n = 8  # Size of the board
    board = [[0 for _ in range(n)] for _ in range(n)]  # Create an empty board
    solve_n_queens(board)
