from collections import deque

class State:
    def __init__(self, m_left, c_left, m_right, c_right, boat):
        self.m_left = m_left  # Number of missionaries on the left
        self.c_left = c_left  # Number of cannibals on the left
        self.m_right = m_right  # Number of missionaries on the right
        self.c_right = c_right  # Number of cannibals on the right
        self.boat = boat  # Boat position: 1 for left, 0 for right

    def is_valid(self):
        # Check if the state is valid
        if self.m_left < 0 or self.c_left < 0 or self.m_right < 0 or self.c_right < 0:
            return False
        if (self.m_left > 0 and self.m_left < self.c_left) or (self.m_right > 0 and self.m_right < self.c_right):
            return False
        return True

    def is_goal(self):
        # Check if the goal state is reached
        return self.m_left == 0 and self.c_left == 0

    def __hash__(self):
        return hash((self.m_left, self.c_left, self.boat))

    def __eq__(self, other):
        return (self.m_left, self.c_left, self.boat) == (other.m_left, other.c_left, other.boat)

def get_successors(state):
    successors = []
    if state.boat == 1:  # Boat is on the left
        # Possible moves from left to right
        moves = [(1, 0), (0, 1), (1, 1)]  # (missionaries, cannibals)
    else:  # Boat is on the right
        # Possible moves from right to left
        moves = [(-1, 0), (0, -1), (-1, -1)]  # (missionaries, cannibals)

    for m, c in moves:
        new_state = State(state.m_left - m, state.c_left - c, state.m_right + m, state.c_right + c, 1 - state.boat)
        if new_state.is_valid():
            successors.append(new_state)

    return successors

def bfs():
    initial_state = State(3, 3, 0, 0, 1)  # 3 missionaries and 3 cannibals on the left
    queue = deque([initial_state])
    visited = set([initial_state])

    while queue:
        current_state = queue.popleft()

        if current_state.is_goal():
            return current_state

        for successor in get_successors(current_state):
            if successor not in visited:
                visited.add(successor)
                queue.append(successor)

    return None

def print_solution(solution):
    path = []
    current = solution
    while current:
        path.append(current)
        if current.boat == 1:
            current = State(current.m_left, current.c_left, current.m_right, current.c_right, 1 - current.boat)  # Move back
        else:
            break
    for state in reversed(path):
        print(f"Left: {state.m_left}M {state.c_left}C | Right: {state.m_right}M {state.c_right}C | Boat: {'Left' if state.boat == 1 else 'Right'}")

solution = bfs()
if solution:
    print("Solution found:")
    print_solution(solution)
else:
    print("No solution found.")
