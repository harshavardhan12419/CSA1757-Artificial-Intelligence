import heapq
import numpy as np

class PuzzleState:
    def __init__(self, board, moves=0, previous=None):
        self.board = board
        self.blank_tile = self.find_blank()
        self.moves = moves
        self.previous = previous
        self.cost = self.moves + self.heuristic()

    def find_blank(self):
        return np.argwhere(self.board == 0)[0]

    def heuristic(self):
        # Using Manhattan distance as the heuristic
        distance = 0
        for i in range(3):
            for j in range(3):
                if self.board[i][j] != 0:
                    target_x = (self.board[i][j] - 1) // 3
                    target_y = (self.board[i][j] - 1) % 3
                    distance += abs(i - target_x) + abs(j - target_y)
        return distance

    def get_neighbors(self):
        neighbors = []
        x, y = self.blank_tile
        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # Up, Down, Left, Right
        for dx, dy in directions:
            new_x, new_y = x + dx, y + dy
            if 0 <= new_x < 3 and 0 <= new_y < 3:
                new_board = self.board.copy()
                new_board[x, y], new_board[new_x, new_y] = new_board[new_x, new_y], new_board[x, y]
                neighbors.append(PuzzleState(new_board, self.moves + 1, self))
        return neighbors

    def is_goal(self):
        return np.array_equal(self.board, np.array([[1, 2, 3], [4, 5, 6], [7, 8, 0]]))

    def __lt__(self, other):
        return self.cost < other.cost

def a_star(initial_board):
    initial_state = PuzzleState(initial_board)
    if initial_state.is_goal():
        return initial_state

    open_set = []
    heapq.heappush(open_set, initial_state)
    closed_set = set()

    while open_set:
        current_state = heapq.heappop(open_set)

        if current_state.is_goal():
            return current_state

        closed_set.add(tuple(current_state.board.flatten()))

        for neighbor in current_state.get_neighbors():
            if tuple(neighbor.board.flatten()) in closed_set:
                continue
            heapq.heappush(open_set, neighbor)

    return None

def print_solution(solution):
    path = []
    while solution:
        path.append(solution.board)
        solution = solution.previous
    for board in reversed(path):
        print(board)

if __name__ == "__main__":
    initial_board = np.array([[1, 2, 3],
                               [4, 0, 6],
                               [7, 5, 8]])
    
    solution = a_star(initial_board)
    if solution:
        print("Solution found:")
        print_solution(solution)
    else:
        print("No solution exists.")
