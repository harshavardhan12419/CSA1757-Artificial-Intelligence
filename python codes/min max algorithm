def min_max(depth, is_maximizing, scores):
    # Base case: if we reach the end of the list
    if depth >= len(scores):
        return 0  # No more moves

    if is_maximizing:
        best_score = float('-inf')
        for i in range(depth, len(scores)):
            score = scores[i] + min_max(i + 1, False, scores)  # Maximize score
            best_score = max(best_score, score)
        return best_score
    else:
        best_score = float('inf')
        for i in range(depth, len(scores)):
            score = scores[i] + min_max(i + 1, True, scores)  # Minimize score
            best_score = min(best_score, score)
        return best_score

# Example usage
scores = [3, 5, 2, 9, 7]  # Sample scores for the game
result = min_max(0, True, scores)
print("Optimal score for maximizing player:", result)
