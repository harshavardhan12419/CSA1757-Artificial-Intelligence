def is_safe(graph, colors, node, color):
    """Check if it's safe to color the node with the given color."""
    for neighbor in graph[node]:
        if colors[neighbor] == color:
            return False
    return True

def map_coloring_util(graph, m, colors, node):
    """Utility function to solve the map coloring problem using backtracking."""
    if node == len(graph):
        return True  # All nodes are colored

    for color in range(1, m + 1):
        if is_safe(graph, colors, node, color):
            colors[node] = color  # Assign color

            if map_coloring_util(graph, m, colors, node + 1):
                return True  # If successful, return true

            colors[node] = 0  # Backtrack

    return False  # No solution found

def map_coloring(graph, m):
    """Main function to solve the map coloring problem."""
    colors = [0] * len(graph)  # Color assignment for nodes

    if map_coloring_util(graph, m, colors, 0):
        return colors
    else:
        return None  # No solution exists

# Sample graph represented as an adjacency list
# Example: A simple graph with 5 nodes
graph = [
    [1, 2, 3],  # Node 0 is connected to Nodes 1, 2, 3
    [0, 2],     # Node 1 is connected to Nodes 0, 2
    [0, 1, 3, 4],  # Node 2 is connected to Nodes 0, 1, 3, 4
    [0, 2],     # Node 3 is connected to Nodes 0, 2
    [2]         # Node 4 is connected to Node 2
]

m = 3  # Number of colors
result = map_coloring(graph, m)

if result:
    print("Color assignment for the graph:", result)
else:
    print("No solution exists.")
