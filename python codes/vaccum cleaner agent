class VacuumCleanerAgent:
    def __init__(self, grid):
        self.grid = grid
        self.position = (0, 0)  # Starting position
        self.cleaned = 0  # Count of cleaned squares

    def move(self, direction):
        x, y = self.position
        if direction == "up" and x > 0:
            self.position = (x - 1, y)
        elif direction == "down" and x < len(self.grid) - 1:
            self.position = (x + 1, y)
        elif direction == "left" and y > 0:
            self.position = (x, y - 1)
        elif direction == "right" and y < len(self.grid[0]) - 1:
            self.position = (x, y + 1)

    def clean(self):
        x, y = self.position
        if self.grid[x][y] == 1:  # If the cell is dirty
            self.grid[x][y] = 0  # Clean the cell
            self.cleaned += 1
            print(f"Cleaned position: {self.position}")

    def is_dirty(self):
        x, y = self.position
        return self.grid[x][y] == 1

    def run(self):
        for i in range(len(self.grid)):
            for j in range(len(self.grid[0])):
                self.position = (i, j)  # Move to the next cell
                self.clean()
                # Optionally, you can add logic to move to the next cell in a more complex way

    def display_grid(self):
        for row in self.grid:
            print(" ".join(str(cell) for cell in row))
        print()

# Example grid (1 represents dirty, 0 represents clean)
grid = [
    [1, 0, 1, 1],
    [0, 1, 0, 0],
    [1, 1, 1, 0],
    [0, 0, 0, 1]
]

# Create the vacuum cleaner agent
agent = VacuumCleanerAgent(grid)

# Display initial grid
print("Initial Grid:")
agent.display_grid()

# Run the vacuum cleaner agent
agent.run()

# Display final grid
print("Final Grid:")
agent.display_grid()
print(f"Total cleaned: {agent.cleaned}")
