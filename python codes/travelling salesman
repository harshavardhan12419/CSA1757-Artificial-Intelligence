import itertools

def calculate_distance(city1, city2):
    """Calculate the Euclidean distance between two cities."""
    return ((city1[0] - city2[0]) ** 2 + (city1[1] - city2[1]) ** 2) ** 0.5

def total_distance(route, cities):
    """Calculate the total distance of the given route."""
    distance = 0
    for i in range(len(route)):
        distance += calculate_distance(cities[route[i]], cities[route[(i + 1) % len(route)]])
    return distance

def traveling_salesman(cities):
    """Solve the Traveling Salesman Problem using brute-force."""
    n = len(cities)
    all_routes = itertools.permutations(range(n))
    
    min_distance = float('inf')
    best_route = None
    
    for route in all_routes:
        current_distance = total_distance(route, cities)
        if current_distance < min_distance:
            min_distance = current_distance
            best_route = route
            
    return best_route, min_distance

# Example usage:
if __name__ == "__main__":
    # List of cities represented as (x, y) coordinates
    cities = [(0, 0), (1, 1), (2, 0), (1, -1)]
    
    best_route, min_distance = traveling_salesman(cities)
    print("Best route:", best_route)
    print("Minimum distance:", min_distance)
